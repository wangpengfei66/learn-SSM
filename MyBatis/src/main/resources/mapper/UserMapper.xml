<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kaishengit.mapper.UserMapper">
	<!-- namespace属性值推荐写成类似完全限定名的形式 -->
	<!-- 
		根据Id查询User对象
		id:类似方法名
		parameterType：参数类型（可选）
		resultType：返回值类型（可选	）
	 -->
	 <!-- <cache readOnly="true" size="1024" eviction="FIFO" flushInterval="60000"/> -->
	 <sql id="allColums">
	 	id,user_name,address,password,dept_id
	 </sql>
	 
<!-- 	<select id="findById" parameterType="int" resultType="User" useCache="false">
		select <include refid="allColums"></include> from t_user where id = #{id}
	</select>
	<select id="findAll" resultType="User">
		select <include refid="allColums"></include> from t_user
	</select>
	<select id="findByUserNameAndPassword" resultType="User">
		select <include refid="allColums"></include> from t_user where user_name = #{userName} and password = #{pwd}
	</select>
	<select id="findByMapParams" resultType="User">
		select <include refid="allColums"></include> from t_user where user_name = #{userName} and password = #{pwd}
	</select> -->
	<select id="searchByNameAndAddress" parameterType="map" resultType="User">
		select 
			<include refid="allColums"></include>
		from t_user 
		<trim prefix="where" prefixOverrides="and|or"> 
		<if test="name != null and name != ''">
			user_name = #{name}
		</if>
		<if test="address != null and address != ''">
			and address = #{address}
		</if>
		</trim>
	</select>
	
	
	
	<!-- ONGL 进行映射 -->
	<select id="findAllLoadDept" resultType="User">
		SELECT
		u.id,
		user_name,
		address,
		`password`,
		dept_id,
		d.dept_name as 'dept.deptName'
	FROM
		`t_user` u,
		t_dept d
	WHERE
		u.dept_id = d.id
	</select>
	
	
	
	<!-- <select id="findAllLoadDept" resultMap="userMap">
		SELECT
		u.id,
		user_name,
		address,
		`password`,
		dept_id,
		dept_name
	FROM
		`t_user` u,
		t_dept d
	WHERE
		u.dept_id = d.id
	</select>
	自定义结果集映射：告诉MyBatis如何将列和类的属性进行对应
	<resultMap type="User" id="userMap">
		<id column="id" property="id"/>
		<result column="user_name" property="userName"/>
		<result column="address" property="address"/>
		<result column="password" property="password"/>
		<result column="dept_id" property="deptId"/>
		<association property="dept" javaType="Dept">
			<id column="id" property="id"/>
			<result column="dept_name" property="deptName"/>
		</association>	
	</resultMap> -->
	
	
	
	<!-- <insert id="save" parameterType="User" useGeneratedKeys="true" keyProperty="id">
		insert into t_user (user_name,address,password)values(#{userName},#{address},#{password})
	</insert> -->
	<insert id="batchsave" parameterType="list">
		insert into t_user (user_name,address,password)values
		<foreach collection="list" item="user" separator=",">
			(#{user.userName},#{user.address},#{user.password})
		</foreach>
	</insert>
	
	<!-- <update id="update" parameterType="User" flushCache="false">
		update t_user set user_name = #{userName},address = #{address},password = #{password} where id = #{id}
	</update> -->
	
	<!-- <delete id="delById" parameterType="int">
		delete from t_user where id = #{id}
	</delete> -->
	
	<delete id="delByIds" parameterType="list">
		delete from t_user where id in 
		<foreach collection="list" item="ids" separator="," open="(" close=")">
			#{ids}
		</foreach>
	</delete>
	
	
</mapper>